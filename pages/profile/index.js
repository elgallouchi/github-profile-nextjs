import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import { getRepos } from "../../Store/profileSlice";
import Profile from "../../Components/Profile";
import styles from "../../styles/Home.module.css";
import st from "../../styles/Repos.module.css";
import { RiBookMarkLine } from "react-icons/ri";
import { FaRegStar } from "react-icons/fa";
import { TbGitFork } from "react-icons/tb";
import { GoPrimitiveDot } from "react-icons/go";

import Loading from "../../Components/Loading";

import Head from "next/head";
import Repos from "../../Components/Repos";

export default function User() {
  const { repos, error, loading, profileUser } = useSelector(
    (state) => state.profile
  );
  const router = useRouter();
  const { q } = router.query;

  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getRepos(q));
  }, [q]);

  // repos with demo link
  const allRepos = repos.filter((repo) => repo);

  // repos with demo link
  const reposWithLinkDemo = repos.filter(
    (repo) => repo.homepage !== null && repo.homepage !== ""
  );

  // repos with description
  const reposWithDiscription = repos.filter(
    (repo) => repo.description !== null && repo.description !== ""
  );

  // repos with page
  const reposHasPage = repos.filter((repo) => repo.has_pages);

  const reposFiltred = (args) =>
    args.map((repo, index) => (
      <div className={st.item} key={index}>
        <div className={st.header}>
          <h5>
            <RiBookMarkLine /> {repo.name}
          </h5>
          <p>{repo?.description}</p>
        </div>
        <div className={st.info}>
          {repo.language && (
            <div className="language">
              <GoPrimitiveDot style={{}} className={repo.language} />
              <span>{repo.language}</span>
            </div>
          )}
          <div className="start">
            <FaRegStar />
            <span>{repo.stargazers_count}</span>
          </div>
          <div className="fork">
            <TbGitFork />
            <span>{repo.forks_count}</span>
          </div>
        </div>
        <div className={st.footer}>
          {repo.homepage && (
            <p>
              <a className={st.preview} href={repo.homepage} target="_blank">
                Preview
              </a>
            </p>
          )}
          <p>
            <a className={st.repo} href={repo.html_url} target="_blank">
              Repo
            </a>
          </p>
          {repo.has_pages && (
            <p>
              <a
                className={st.demo}
                href={`https://${repo.owner.login}.github.io/${repo.name}`}
                target="_blank"
              >
                Demo
              </a>
            </p>
          )}
        </div>
      </div>
    ));

  return (
    <>
      <Head>
        <title>{profileUser && profileUser?.login} Github Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href={
            profileUser && profileUser.avatar_url
              ? profileUser.avatar_url
              : "/logo.svg"
          }
        />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          {loading ? (
            <Loading />
          ) : (
            <Repos
              profileUser={profileUser}
              repos={repos}
              reposHasPage={reposHasPage}
              reposWithLinkDemo={reposWithLinkDemo}
              reposWithDiscription={reposWithDiscription}
              reposFiltred={reposFiltred}
            />
          )}
        </div>
      </main>
    </>
  );
}
